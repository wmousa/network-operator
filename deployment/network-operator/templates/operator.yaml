{{/*
  Copyright 2020 NVIDIA

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "network-operator.fullname" . }}
  labels:
    {{- include "network-operator.labels" . | nindent 4 }}
    {{- if .Values.admissionController.enabled }}
    control-plane: controller-manager
    {{- end }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "network-operator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if .Values.admissionController.enabled }}
      annotations:
        kubectl.kubernetes.io/default-container: {{ .Chart.Name }}
      {{- end }}
      labels:
        nvidia.com/ofed-driver-upgrade-drain.skip: "true"
        {{- if .Values.admissionController.enabled }}
        control-plane: controller-manager
        {{- end }}
        {{- include "network-operator.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.operator.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.affinity}}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "network-operator.fullname" . }}
      imagePullSecrets: {{ include "network-operator.operator.imagePullSecrets" . }}
      containers:
        {{- if .Values.admissionController.enabled }}
        - name: kube-rbac-proxy
          args:
          - --secure-listen-address=0.0.0.0:8443
          - --upstream=http://127.0.0.1:8080/
          - --logtostderr=true
          - --v=0
          image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:db06cc4c084dd0253134f156dddaaf53ef1c3fb3cc809e5d81711baa4029ea4c
          ports:
          - containerPort: 8443
            name: https
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 5m
              memory: 64Mi
        {{- end }}
        - name: {{ .Chart.Name }}
          # Replace this with the built image name
          image: "{{ .Values.operator.repository }}/{{ .Values.operator.image }}:{{ .Values.operator.tag | default .Chart.AppVersion }}"
          {{- if .Values.admissionController.enabled }}
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
          {{- end }}
          command:
          - /manager
          imagePullPolicy: IfNotPresent
          env:
            - name: STATE_MANIFEST_BASE_DIR
              value: "/manifests"
            - name: WATCH_NAMESPACE
              value: ""
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OPERATOR_NAME
              value: "network-operator"
            - name: ENABLE_WEBHOOKS
              value: "{{ .Values.admissionController.enabled }}"
      {{- if .Values.admissionController.enabled }}
      securityContext:
        runAsUser: 65532
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
      {{- end }}
